{"pid":{"summary":"PID of the resque-pool process, or nil if it's not running.","full":"----------------------------------- Method: #pid (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.pid -> (Integer, NilClass) (readonly)\n------------------------------------------------------------------------\n    PID of the resque-pool process, or nil if it's not running \nReturns:\n--------\n    (Integer, NilClass) - \n"},"config_path":{"summary":"Path to the temporary config file.","full":"--------------------------- Method: #config_path (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.config_path -> String \n------------------------------------------------------------------------\n    Path to the temporary config file \nReturns:\n--------\n    (String) - \n"},"config":{"summary":"","full":"-------------------------------- Method: #config (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.config -> Hash \n    dynamic.config(opts) -> Hash \n------------------------------------------------------------------------\n    Note: Default configuration is taken from environment variable\n    \"WORKERS\", as interpreted by the #parse_config_string method.\nExamples:\n---------\n    # config\n    #=> {\"foo\"=>1, \"bar\"=>2}\n    config :foo => 2, :baz => 7\n    #=> {\"foo\"=>2, \"baz\"=>7, \"bar\"=>2}\n    config :bar => 0\n    #=> {\"foo\"=>2, \"baz\"=>7}\nOverloads:\n----------\n------------------------------------------------------------------------\n    dynamic.config -> Hash \n------------------------------------------------------------------------\n        Show current workers configuration \n    Returns:\n    --------\n        (Hash) - \n------------------------------------------------------------------------\n    dynamic.config(opts) -> Hash \n------------------------------------------------------------------------\n        Update workers configuration. If configuration has change and\n        resque-pool is running, it is reloaded. \n    Parameters:\n    -----------\n        (Hash) opts - Dictionary of worker process counts to update\n        (pass 0 or nil as value to delete all workers for a queue from pool)\n    Returns:\n    --------\n        (Hash) - Updated config\n"},"write_config":{"summary":"Write temporary configuration file.","full":"-------------------------- Method: #write_config (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.write_config \n------------------------------------------------------------------------\n    Write temporary configuration file \n"},"start!":{"summary":"Fork a child process for resque-pool master.","full":"-------------------------------- Method: #start! (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.start! -> Integer \n------------------------------------------------------------------------\n    Fork a child process for resque-pool master \nReturns:\n--------\n    (Integer) - PID of the child process\n"},"start":{"summary":"Start resque-pool, showing startup logs.","full":"--------------------------------- Method: #start (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.start \n------------------------------------------------------------------------\n    Start resque-pool, showing startup logs \n"},"kill!":{"summary":"Send signal to a running resque-pool.","full":"--------------------------------- Method: #kill! (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.kill!(sig) \n------------------------------------------------------------------------\n    Send signal to a running resque-pool \nParameters:\n-----------\n    (String, Integer) sig - Signal name or number\n"},"stop!":{"summary":"Stop running resque-pool.","full":"--------------------------------- Method: #stop! (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.stop! \n------------------------------------------------------------------------\n    Stop running resque-pool \n"},"stop":{"summary":"Stop running resque-pool, show shutdown logs.","full":"---------------------------------- Method: #stop (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.stop \n------------------------------------------------------------------------\n    Stop running resque-pool, show shutdown logs \n"},"reload":{"summary":"Reload resque-pool configuration.","full":"-------------------------------- Method: #reload (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.reload \n------------------------------------------------------------------------\n    Reload resque-pool configuration \n"},"pstree":{"summary":"Show child process tree by calling `pstree` system command.","full":"-------------------------------- Method: #pstree (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.pstree \n------------------------------------------------------------------------\n    Show child process tree by calling `pstree` system command \n"},"status":{"summary":"Show current status.","full":"-------------------------------- Method: #status (Resque::Pool::Dynamic)\n                                (Defined in: lib/resque/pool/dynamic.rb)\n    dynamic.status \n------------------------------------------------------------------------\n    Show current status \n"},"log_path":{"summary":"Logfile path.","full":"------------------------------ Method: #log_path (Resque::Pool::Dynamic)\n                        (Defined in: lib/resque/pool/dynamic/logfile.rb)\n    dynamic.log_path -> String \n------------------------------------------------------------------------\n    Logfile path \nReturns:\n--------\n    (String) - Path to the log file\n"},"log":{"summary":"Open log of resque-pool process.","full":"----------------------------------- Method: #log (Resque::Pool::Dynamic)\n                        (Defined in: lib/resque/pool/dynamic/logfile.rb)\n    dynamic.log -> Logfile \n------------------------------------------------------------------------\n    Open log of resque-pool process \nReturns:\n--------\n    (Logfile) - Logfile instance\n"},"has_log?":{"summary":"True if we have an open log file.","full":"------------------------------ Method: #has_log? (Resque::Pool::Dynamic)\n                        (Defined in: lib/resque/pool/dynamic/logfile.rb)\n    dynamic.has_log? -> Boolean \n------------------------------------------------------------------------\n    True if we have an open log file \nReturns:\n--------\n    (Boolean) - \n"},"log.tail":{"summary":"Show last n lines of the file, or follow the file.","full":"------------------------- Method: #tail (Resque::Pool::Dynamic::Logfile)\n                        (Defined in: lib/resque/pool/dynamic/logfile.rb)\n    logfile.tail(n = nil) {|ln| ... } \n------------------------------------------------------------------------\n    Show last n lines of the file, or follow the file \nParameters:\n-----------\n    (Integer, NilClass) n - Number of lines or nil\nYields:\n-------\n    (ln) - Called for every line of file\nYield Parameters:\n-----------------\n    (String) ln - Input line\n"},"log.tail_until":{"summary":"Follow the file until a line matches regexp.","full":"------------------- Method: #tail_until (Resque::Pool::Dynamic::Logfile)\n                        (Defined in: lib/resque/pool/dynamic/logfile.rb)\n    logfile.tail_until(rx) \n------------------------------------------------------------------------\n    Follow the file until a line matches regexp \n"},"log.tail_to_eof":{"summary":"Print contents of the file until current end of file.","full":"------------------ Method: #tail_to_eof (Resque::Pool::Dynamic::Logfile)\n                        (Defined in: lib/resque/pool/dynamic/logfile.rb)\n    logfile.tail_to_eof \n------------------------------------------------------------------------\n    Print contents of the file until current end of file \n"},"log.ff":{"summary":"Fast forward until end of file (see IO::Tail#backward).","full":"--------------------------- Method: #ff (Resque::Pool::Dynamic::Logfile)\n                        (Defined in: lib/resque/pool/dynamic/logfile.rb)\n    logfile.ff \n------------------------------------------------------------------------\n    Fast forward until end of file (see IO::Tail#backward) \n"},"log.rew":{"summary":"Rewind until beginning of file (see IO::Tail#forward).","full":"-------------------------- Method: #rew (Resque::Pool::Dynamic::Logfile)\n                        (Defined in: lib/resque/pool/dynamic/logfile.rb)\n    logfile.rew \n------------------------------------------------------------------------\n    Rewind until beginning of file (see IO::Tail#forward) \n"},"log.rewind":{"summary":"Rewind until beginning of file (see IO::Tail#forward).","full":"----------------------- Method: #rewind (Resque::Pool::Dynamic::Logfile)\n                        (Defined in: lib/resque/pool/dynamic/logfile.rb)\n    logfile.rewind \n------------------------------------------------------------------------\n    Rewind until beginning of file (see IO::Tail#forward) \n"},"exit":{"summary":"Finish work","full":"Finish work (AKA quit)"}}